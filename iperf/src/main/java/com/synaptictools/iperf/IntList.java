/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.synaptictools.iperf;

public class IntList extends java.util.AbstractSequentialList<Integer> {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected IntList(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IntList obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(IntList obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        iPerfLibJNI.delete_IntList(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public IntList(java.util.Collection c) {
    this();
    java.util.ListIterator<Integer> it = listIterator(0);
    // Special case the "copy constructor" here to avoid lots of cross-language calls
    for (java.lang.Object o : c) {
      it.add((Integer)o);
    }
  }

  public int size() {
    return doSize();
  }

  public boolean add(Integer value) {
    addLast(value);
    return true;
  }

  public java.util.ListIterator<Integer> listIterator(int index) {
    return new java.util.ListIterator<Integer>() {
      private Iterator pos;
      private Iterator last;

      private java.util.ListIterator<Integer> init(int index) {
        if (index < 0 || index > IntList.this.size())
          throw new IndexOutOfBoundsException("Index: " + index);
        pos = IntList.this.begin();
	pos = pos.advance_unchecked(index);
        return this;
      }

      public void add(Integer v) {
        // Technically we can invalidate last here, but this makes more sense
        last = IntList.this.insert(pos, v);
      }

      public void set(Integer v) {
        if (null == last) {
          throw new IllegalStateException();
        }
        last.set_unchecked(v);
      }

      public void remove() {
        if (null == last) {
          throw new IllegalStateException();
        }
        IntList.this.remove(last);
        last = null;
      }

      public int previousIndex() {
        return IntList.this.doPreviousIndex(pos);
      }

      public int nextIndex() {
        return IntList.this.doNextIndex(pos);
      }

      public Integer previous() {
        if (previousIndex() < 0) {
          throw new java.util.NoSuchElementException();
        }
        last = pos;
        pos = pos.previous_unchecked();
        return last.deref_unchecked();
      }

      public Integer next() {
        if (!hasNext()) {
          throw new java.util.NoSuchElementException();
        }
        last = pos;
        pos = pos.next_unchecked();
        return last.deref_unchecked();
      }

      public boolean hasPrevious() {
        // This call to previousIndex() will be much slower than the hasNext() implementation, but it's simpler like this with C++ forward iterators
        return previousIndex() != -1;
      }

      public boolean hasNext() {
        return IntList.this.doHasNext(pos);
      }
    }.init(index);
  }

  static public class Iterator {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected Iterator(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Iterator obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected static long swigRelease(Iterator obj) {
      long ptr = 0;
      if (obj != null) {
        if (!obj.swigCMemOwn)
          throw new RuntimeException("Cannot release ownership as memory is not owned");
        ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.delete();
      }
      return ptr;
    }
  
    @SuppressWarnings({"deprecation", "removal"})
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          iPerfLibJNI.delete_IntList_Iterator(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void set_unchecked(int v) {
      iPerfLibJNI.IntList_Iterator_set_unchecked(swigCPtr, this, v);
    }
  
    public IntList.Iterator next_unchecked() {
      return new IntList.Iterator(iPerfLibJNI.IntList_Iterator_next_unchecked(swigCPtr, this), true);
    }
  
    public IntList.Iterator previous_unchecked() {
      return new IntList.Iterator(iPerfLibJNI.IntList_Iterator_previous_unchecked(swigCPtr, this), true);
    }
  
    public int deref_unchecked() {
      return iPerfLibJNI.IntList_Iterator_deref_unchecked(swigCPtr, this);
    }
  
    public IntList.Iterator advance_unchecked(int index) {
      return new IntList.Iterator(iPerfLibJNI.IntList_Iterator_advance_unchecked(swigCPtr, this, index), true);
    }
  
  }

  public IntList() {
    this(iPerfLibJNI.new_IntList__SWIG_0(), true);
  }

  public IntList(IntList other) {
    this(iPerfLibJNI.new_IntList__SWIG_1(IntList.getCPtr(other), other), true);
  }

  public boolean isEmpty() {
    return iPerfLibJNI.IntList_isEmpty(swigCPtr, this);
  }

  public void clear() {
    iPerfLibJNI.IntList_clear(swigCPtr, this);
  }

  public IntList.Iterator remove(IntList.Iterator pos) {
    return new IntList.Iterator(iPerfLibJNI.IntList_remove(swigCPtr, this, IntList.Iterator.getCPtr(pos), pos), true);
  }

  public void removeLast() {
    iPerfLibJNI.IntList_removeLast(swigCPtr, this);
  }

  public void removeFirst() {
    iPerfLibJNI.IntList_removeFirst(swigCPtr, this);
  }

  public void addLast(int value) {
    iPerfLibJNI.IntList_addLast(swigCPtr, this, value);
  }

  public void addFirst(int value) {
    iPerfLibJNI.IntList_addFirst(swigCPtr, this, value);
  }

  private IntList.Iterator begin() {
    return new IntList.Iterator(iPerfLibJNI.IntList_begin(swigCPtr, this), true);
  }

  public IntList.Iterator end() {
    return new IntList.Iterator(iPerfLibJNI.IntList_end(swigCPtr, this), true);
  }

  private IntList.Iterator insert(IntList.Iterator pos, int value) {
    return new IntList.Iterator(iPerfLibJNI.IntList_insert(swigCPtr, this, IntList.Iterator.getCPtr(pos), pos, value), true);
  }

  public IntList(int count, int value) {
    this(iPerfLibJNI.new_IntList__SWIG_2(count, value), true);
  }

  private int doSize() {
    return iPerfLibJNI.IntList_doSize(swigCPtr, this);
  }

  private int doPreviousIndex(IntList.Iterator pos) {
    return iPerfLibJNI.IntList_doPreviousIndex(swigCPtr, this, IntList.Iterator.getCPtr(pos), pos);
  }

  private int doNextIndex(IntList.Iterator pos) {
    return iPerfLibJNI.IntList_doNextIndex(swigCPtr, this, IntList.Iterator.getCPtr(pos), pos);
  }

  private boolean doHasNext(IntList.Iterator pos) {
    return iPerfLibJNI.IntList_doHasNext(swigCPtr, this, IntList.Iterator.getCPtr(pos), pos);
  }

}
